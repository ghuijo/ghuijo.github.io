<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ghuijo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ghuijo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-09T18:57:08+00:00</updated><id>https://ghuijo.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">LeRobot Pi0 Finetuning Tutorial</title><link href="https://ghuijo.github.io/blog/2025/LeRobot-PI0-Finetuning-Tutorial/" rel="alternate" type="text/html" title="LeRobot Pi0 Finetuning Tutorial"/><published>2025-08-29T00:00:00+00:00</published><updated>2025-08-29T00:00:00+00:00</updated><id>https://ghuijo.github.io/blog/2025/LeRobot-PI0-Finetuning-Tutorial</id><content type="html" xml:base="https://ghuijo.github.io/blog/2025/LeRobot-PI0-Finetuning-Tutorial/"><![CDATA[<p>This is a blog post on how to finetune LeRobot Pi0.</p> <h3 id="references">References</h3> <p><a href="https://huggingface.co/docs/lerobot/il_robots">LeRobot Imitation Learning Tutorial</a> <a href="https://huggingface.co/blog/pi0">LeRobot Pi0 and Pi0-fast Blog</a></p> <h3 id="experiment-environment">Experiment environment</h3> <ul> <li>GPU: Tesla A100 SXM4 40GB</li> <li>OS: Ubuntu 20.04 LTS</li> <li>NVIDIA Driver: 570.169 (CUDA 12.8)</li> </ul> <h3 id="anaconda-environment-setup">Anaconda environment setup</h3> <ul> <li> <p><strong>Install Python 3.10 or higher</strong></p> </li> <li><strong>Install PyTorch</strong> Currently, LeRobot only supports PyTorch versions below 2.8. Use the following command to install a compatible version: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span><span class="nv">torch</span><span class="o">==</span>2.7.1 <span class="nv">torchvision</span><span class="o">==</span>0.22.1 <span class="nv">torchaudio</span><span class="o">==</span>2.7.1 <span class="nt">--index-url</span> https://download.pytorch.org/whl/cu128
</code></pre></div> </div> </li> <li><strong>Log in to WandB &amp; Hugging Face</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wandb login
</code></pre></div> </div> <p>(Tip: If your school email can be verified, you can use WandB for free ‚Äî even after graduation.)</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>huggingface-cli login
</code></pre></div> </div> </li> <li><strong>Install Additional Required Libraries</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>transformers iniconfig pytest
</code></pre></div> </div> </li> </ul> <p>Depending on your environment, you might get an error asking you to install ffmpeg. There are several ways to install it, but the following method worked most cleanly:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install</span> <span class="nt">-n</span> pi0 <span class="nt">-c</span> conda-forge <span class="s2">"ffmpeg&gt;=6,&lt;8"</span>
</code></pre></div></div> <p>üëâ This installs ffmpeg (version ‚â•6 and &lt;8) into the conda environment named pi0.</p> <ul> <li><strong>Request Access to the Pretrained Model (PaliGemma)</strong> Get access here: üîó https://huggingface.co/google/paligemma-3b-pt-224</li> </ul> <h3 id="pi0-finetuning">Pi0 finetuning</h3> <p>When you install LeRobot, it automatically links the command lerobot-train to train.py. However, you can also run it directly like this. Since the command is quite long, it‚Äôs convenient to save it as a train.sh file and run it using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh train.sh
</code></pre></div></div> <ul> <li>Example training command: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CUDA_VISIBLE_DEVICES</span><span class="o">=</span>3 python src/lerobot/scripts/train.py <span class="se">\</span>
<span class="nt">--policy</span>.path<span class="o">=</span>lerobot/pi0 <span class="se">\</span>
<span class="nt">--dataset</span>.repo_id<span class="o">={</span>HF_USER<span class="o">}</span>/<span class="o">{</span>data_name<span class="o">}</span> <span class="se">\</span>
<span class="nt">--output_dir</span><span class="o">=</span>outputs/train/<span class="o">{</span>project_name<span class="o">}</span> <span class="se">\</span>
<span class="nt">--job_name</span><span class="o">=</span>pi0_so101_finetune <span class="se">\</span>
<span class="nt">--policy</span>.device<span class="o">=</span>cuda <span class="se">\</span>
<span class="nt">--policy</span>.repo_id<span class="o">=</span>None <span class="se">\</span>
<span class="nt">--task</span><span class="o">=</span><span class="s2">"move doll into a cup"</span> <span class="se">\</span>
<span class="nt">--wandb</span>.enable<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
<span class="nt">--wandb</span>.project<span class="o">=</span><span class="s2">"{project_name}"</span>
</code></pre></div> </div> </li> <li> <p>Parameter explanations: policy.path ‚Äì If you‚Äôre using pretrained model weights, specify the Hugging Face repository containing those weights. policy.repo_id ‚Äì If you want to automatically upload your trained model to Hugging Face during training, specify your own repository here. task ‚Äì I didn‚Äôt realize at first, but this is where you input the text prompt that serves as a language command for the model. wandb.enable ‚Äì Set this to true to visualize your training logs as graphs on the WandB dashboard.</p> </li> <li>config setting: num_episode: 50 batch_size: 8 save_steps: 5000 / 10000 ‚Äúfreeze_vision_encoder‚Äù: true, ‚Äútrain_expert_only‚Äù: <strong>false</strong>, ‚Äútrain_state_proj‚Äù: true</li> </ul> <h3 id="modifying-training-configuration">Modifying Training Configuration</h3> <p>In src/lerobot/configs/train.py, you can adjust parameters such as: num_workers, batch_size, steps, eval_freq, log_freq, and save_freq.</p> <p>In src/lerobot/policies/pi0/configuration_pi0.py, you can modify additional options such as train_expert_only and related settings.</p> <h3 id="uploading-a-trained-model-to-hugging-face-specific-checkpoint">Uploading a Trained Model to Hugging Face (Specific Checkpoint)</h3> <p>To upload a specific checkpoint to Hugging Face, use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>huggingface-cli upload <span class="o">{</span>HF_USER<span class="o">}</span>/<span class="o">{</span>project_name<span class="o">}</span> outputs/train/<span class="o">{</span>project_name<span class="o">}</span>/checkpoints/<span class="o">{</span>checkpoint_step<span class="o">}</span>/pretrained_model
</code></pre></div></div> <p>There is no need to manually create the repository in advance ‚Äî it will be created automatically as a public repository during upload.</p> <h3 id="inference">Inference</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lerobot-record  <span class="se">\</span>
<span class="nt">--robot</span>.type<span class="o">=</span>so100_follower <span class="se">\</span>
<span class="nt">--robot</span>.port<span class="o">=</span>/dev/ttyACM1 <span class="se">\</span>
<span class="nt">--robot</span>.cameras<span class="o">=</span><span class="s2">"{ up: {type: opencv, index_or_path: /dev/video10, width: 640, height: 480, fps: 30}, side: {type: intelrealsense, serial_number_or_name: 233522074606, width: 640, height: 480, fps: 30}}"</span> <span class="se">\</span>
<span class="nt">--robot</span>.id<span class="o">=</span>my_awesome_follower_arm <span class="se">\</span>
<span class="nt">--display_data</span><span class="o">=</span><span class="nb">false</span> <span class="se">\</span>
<span class="nt">--dataset</span>.repo_id<span class="o">=</span><span class="k">${</span><span class="nv">HF_USER</span><span class="k">}</span>/eval_so100 <span class="se">\</span>
<span class="nt">--dataset</span>.single_task<span class="o">=</span><span class="s2">"Put lego brick into the transparent box"</span> <span class="se">\</span>
<span class="c"># &lt;- Teleop optional if you want to teleoperate in between episodes \</span>
<span class="c"># -teleop.type=so100_leader \</span>
<span class="c"># -teleop.port=/dev/ttyACM0 \</span>
<span class="c"># -teleop.id=my_awesome_leader_arm \</span>
- <span class="nt">-policy</span>.path<span class="o">=</span><span class="k">${</span><span class="nv">HF_USER</span><span class="k">}</span>/my_policy
</code></pre></div></div> <p>Feel free to reach out if you run into any problems or have suggestions for improving this setup!</p>]]></content><author><name></name></author><category term="robotics"/><category term="Imitation_leaning,"/><category term="LeRobot,"/><category term="Pi0"/><summary type="html"><![CDATA[This is a blog post on how to finetune LeRobot Pi0.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://ghuijo.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://ghuijo.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://ghuijo.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We‚Äôre introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we‚Äôre introducing Gemini 1.5 Flash: a model that‚Äôs lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We‚Äôre also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5‚Äôs 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It‚Äôs optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it‚Äôs a lighter weight model than 1.5 Pro, it‚Äôs highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it‚Äôs been trained by 1.5 Pro through a process called ‚Äúdistillation,‚Äù where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash‚Äôs availability and pricing.Over the last few months, we‚Äôve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we‚Äôve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We‚Äôve improved control over the model‚Äôs responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we‚Äôve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we‚Äôre now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do ‚Äî not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we‚Äôre also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We‚Äôre announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we‚Äôve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind‚Äôs mission to build AI responsibly to benefit humanity, we‚Äôve always wanted to develop universal AI agents that can be helpful in everyday life. That‚Äôs why today, we‚Äôre sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do ‚Äî and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we‚Äôve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we‚Äôve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we‚Äôve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they‚Äôre being used in, and respond quickly, in conversation.With technology like this, it‚Äôs easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We‚Äôve made incredible progress so far with our family of Gemini models, and we‚Äôre always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we‚Äôre able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google‚Äôs privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let‚Äôs stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We‚Äôre sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://ghuijo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://ghuijo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://ghuijo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio¬†Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website!¬†üéâüéâ</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as¬†sources.</p> <p>Any questions or suggestions? üëâ Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on¬†GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>